/**
 * this file is based on @link https://github.com/babel/babel/blob/main/scripts/generators/tsconfig.js
 */
import fs from 'node:fs';
import path from 'node:path';
import { startsWith, reduce } from 'ramda';

import { ROOT, TSCONFIG } from '../paths.mjs';
import { importJSON, appendPackageJson } from '../utils.mjs';

/**
 * from given folder, get all the folders that contains a `package.json`
 * and make list with package's name and its relative
 *
 * @param {string} subRoot folders
 */
const getPkgsFromDir = (subRoot) => {
  return fs
    .readdirSync(path.resolve(ROOT, subRoot))
    .filter(startsWith('mods-'))
    .map((name) => {
      const relative = `./${subRoot}/${name}`;

      const packageJSON = importJSON(path.resolve(ROOT, appendPackageJson(relative)));

      return {
        name: packageJSON.name,
        relative,
      };
    });
};

const packages = getPkgsFromDir('packages');

const makeTsConfigPathMapping = reduce(
  (prev, curr) => ({
    ...prev,
    [curr.name]: [`${curr.relative}/src`],
  }),
  {},
);

fs.writeFileSync(
  TSCONFIG,
  '/* This file is automatically generated by config/generators/tsconfig.mjs */\n' +
    JSON.stringify(
      {
        extends: './tsconfig.base.json',
        compilerOptions: {
          paths: makeTsConfigPathMapping(packages),
        },
      },
      null,
      2,
    ),
);
